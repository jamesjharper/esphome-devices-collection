globals:
  - id: brightness_increment_${switch_name}
    type: float
    restore_value: no
    initial_value: '0.1'

button:

  # Single Click templates
  - platform: template
    name: "Toggle Switch ${switch_name}"
    id: single_click_${switch_name}_button
    disabled_by_default: true
    on_press:
      then:
#        - switch.turn_off: disable_automation_switch
        - switch.toggle: ${switch_name}_power_switch      

  # Double Click templates  
  - platform: template
    name: "Max brightness ${switch_name}"
    id: double_click_${switch_name}_button
    disabled_by_default: true
#    on_press:
#      then:
#        - switch.turn_off: disable_automation_switch
#        - switch.toggle: max_brightness_${switch_name}_switch

  # Long Press templates 
  - platform: template
    name: "Cycle Brightness ${switch_name}"
    id: long_click_${switch_name}_button
    disabled_by_default: true
    on_press:
      then:
      #  - switch.turn_off: disable_automation_switch
        - switch.turn_on: ${switch_name}_power_switch
      #  - switch.turn_on: disable_automation_switch
        - lambda: |-
            auto remote_brightness = id(${switch_name}_brightness_light).current_values.get_brightness();

            remote_brightness = remote_brightness + id(brightness_increment_${switch_name});

            if(remote_brightness <= 0.1f) {
              remote_brightness = 0.1f;
              id(brightness_increment_${switch_name}) *= -1.0f; 
            } else if(remote_brightness >= 1.0f) {
              remote_brightness = 1.0f;
              id(brightness_increment_${switch_name}) *= -1.0f;
            } 
              
            auto call = id(${switch_name}_brightness_light).make_call();
            call.set_state(true);
            call.set_brightness_if_supported(remote_brightness);
            call.set_transition_length(500); 
            call.set_publish(false);
            call.perform();


binary_sensor:
  - platform: gpio
    name: "Switch ${switch_name}"
    pin: ${switch_gpio}
    internal: true
    filters:
      - invert:
      - delayed_on: 50ms  # Noise rejection
      - delayed_off: 50ms # Noise rejection
      - autorepeat:
        - delay: 1s
          time_off: 10ms
          time_on: 500ms

    on_multi_click:
      # Single Click
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.2s
        then:
          - logger.log: "on_single_click_${switch_name} detected"
          - button.press: single_click_${switch_name}_button
          
      # Double Click
      - timing:
          - ON for at most 0.5s
          - OFF for at most 0.2s
          - ON for at most 0.5s
          - OFF for at least 0.1s
        then:
          - logger.log: "on_double_click_${switch_name} detected"
          - button.press: double_click_${switch_name}_button         


      # Triple Click
      - timing:
          - ON for at most 0.5s
          - OFF for at most 0.2s
          - ON for at most 0.5s
          - OFF for at most 0.5s
          - ON for at most 0.5s
          - OFF for at least 0.1s
        then:
          - logger.log: "on_triple_click_${switch_name} detected"
          #- button.press: triple_click_a_or_b_button  

      # Press and Hold
      - timing:
          - ON for at least 0.5s
        then:
          - logger.log: "long_press_detected_${switch_name}"
          - button.press: long_click_${switch_name}_button      